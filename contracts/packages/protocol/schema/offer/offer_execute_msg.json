{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "offer_execute_msg",
  "oneOf": [
    {
      "type": "string",
      "enum": [
        "update_last_traded"
      ]
    },
    {
      "type": "object",
      "required": [
        "create"
      ],
      "properties": {
        "create": {
          "type": "object",
          "required": [
            "offer"
          ],
          "properties": {
            "offer": {
              "$ref": "#/definitions/OfferMsg"
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "update_offer"
      ],
      "properties": {
        "update_offer": {
          "type": "object",
          "required": [
            "offer_update"
          ],
          "properties": {
            "offer_update": {
              "$ref": "#/definitions/OfferUpdateMsg"
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "new_trade"
      ],
      "properties": {
        "new_trade": {
          "type": "object",
          "required": [
            "amount",
            "offer_id",
            "taker"
          ],
          "properties": {
            "amount": {
              "$ref": "#/definitions/Coin"
            },
            "offer_id": {
              "type": "string"
            },
            "taker": {
              "$ref": "#/definitions/Addr"
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "new_arbitrator"
      ],
      "properties": {
        "new_arbitrator": {
          "type": "object",
          "required": [
            "arbitrator",
            "asset"
          ],
          "properties": {
            "arbitrator": {
              "$ref": "#/definitions/Addr"
            },
            "asset": {
              "$ref": "#/definitions/FiatCurrency"
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "delete_arbitrator"
      ],
      "properties": {
        "delete_arbitrator": {
          "type": "object",
          "required": [
            "arbitrator",
            "asset"
          ],
          "properties": {
            "arbitrator": {
              "$ref": "#/definitions/Addr"
            },
            "asset": {
              "$ref": "#/definitions/FiatCurrency"
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "update_trade_arbitrator"
      ],
      "properties": {
        "update_trade_arbitrator": {
          "type": "object",
          "required": [
            "arbitrator"
          ],
          "properties": {
            "arbitrator": {
              "$ref": "#/definitions/Addr"
            }
          }
        }
      },
      "additionalProperties": false
    }
  ],
  "definitions": {
    "Addr": {
      "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
      "type": "string"
    },
    "Coin": {
      "type": "object",
      "required": [
        "amount",
        "denom"
      ],
      "properties": {
        "amount": {
          "$ref": "#/definitions/Uint128"
        },
        "denom": {
          "type": "string"
        }
      }
    },
    "Denom": {
      "oneOf": [
        {
          "type": "object",
          "required": [
            "native"
          ],
          "properties": {
            "native": {
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "cw20"
          ],
          "properties": {
            "cw20": {
              "$ref": "#/definitions/Addr"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "FiatCurrency": {
      "type": "string",
      "enum": [
        "AED",
        "AFN",
        "ALL",
        "AMD",
        "ANG",
        "AOA",
        "ARS",
        "AUD",
        "AWG",
        "AZN",
        "BAM",
        "BBD",
        "BDT",
        "BGN",
        "BHD",
        "BIF",
        "BMD",
        "BND",
        "BOB",
        "BRL",
        "BSD",
        "BTN",
        "BWP",
        "BYR",
        "BZD",
        "CAD",
        "CDF",
        "CHF",
        "CLP",
        "CNY",
        "COP",
        "COU",
        "CRC",
        "CUC",
        "CUP",
        "CVE",
        "CZK",
        "DJF",
        "DKK",
        "DOP",
        "DZD",
        "EGP",
        "ERN",
        "ETB",
        "EUR",
        "FJD",
        "FKP",
        "GBP",
        "GEL",
        "GHS",
        "GIP",
        "GMD",
        "GNF",
        "GTQ",
        "GYD",
        "HKD",
        "HNL",
        "HRK",
        "HTG",
        "HUF",
        "IDR",
        "ILS",
        "INR",
        "IQD",
        "IRR",
        "ISK",
        "JMD",
        "JOD",
        "JPY",
        "KES",
        "KGS",
        "KHR",
        "KMF",
        "KPW",
        "KRW",
        "KWD",
        "KYD",
        "KZT",
        "LAK",
        "LBP",
        "LKR",
        "LRD",
        "LSL",
        "LTL",
        "LVL",
        "LYD",
        "MAD",
        "MDL",
        "MGA",
        "MKD",
        "MMK",
        "MNT",
        "MOP",
        "MRO",
        "MUR",
        "MVR",
        "MWK",
        "MXN",
        "MYR",
        "MZN",
        "NAD",
        "NGN",
        "NIO",
        "NOK",
        "NPR",
        "NZD",
        "OMR",
        "PAB",
        "PEN",
        "PGK",
        "PHP",
        "PKR",
        "PLN",
        "PYG",
        "QAR",
        "RON",
        "RSD",
        "RUB",
        "RWF",
        "SAR",
        "SBD",
        "SCR",
        "SDG",
        "SEK",
        "SGD",
        "SHP",
        "SLL",
        "SOS",
        "SRD",
        "SSP",
        "STD",
        "SYP",
        "SZL",
        "THB",
        "TJS",
        "TMT",
        "TND",
        "TOP",
        "TRY",
        "TTD",
        "TWD",
        "TZS",
        "UAH",
        "UGX",
        "USD",
        "UYU",
        "UZS",
        "VES",
        "VND",
        "VUV",
        "WST",
        "XCD",
        "YER",
        "ZAR",
        "ZMW"
      ]
    },
    "OfferMsg": {
      "type": "object",
      "required": [
        "denom",
        "fiat_currency",
        "max_amount",
        "min_amount",
        "offer_type",
        "rate"
      ],
      "properties": {
        "denom": {
          "$ref": "#/definitions/Denom"
        },
        "fiat_currency": {
          "$ref": "#/definitions/FiatCurrency"
        },
        "max_amount": {
          "$ref": "#/definitions/Uint128"
        },
        "min_amount": {
          "$ref": "#/definitions/Uint128"
        },
        "offer_type": {
          "$ref": "#/definitions/OfferType"
        },
        "rate": {
          "$ref": "#/definitions/Uint128"
        }
      }
    },
    "OfferState": {
      "type": "string",
      "enum": [
        "active",
        "paused",
        "archive"
      ]
    },
    "OfferType": {
      "type": "string",
      "enum": [
        "buy",
        "sell"
      ]
    },
    "OfferUpdateMsg": {
      "type": "object",
      "required": [
        "denom",
        "id",
        "max_amount",
        "min_amount",
        "rate",
        "state"
      ],
      "properties": {
        "denom": {
          "$ref": "#/definitions/Denom"
        },
        "id": {
          "type": "string"
        },
        "max_amount": {
          "$ref": "#/definitions/Uint128"
        },
        "min_amount": {
          "$ref": "#/definitions/Uint128"
        },
        "rate": {
          "$ref": "#/definitions/Uint128"
        },
        "state": {
          "$ref": "#/definitions/OfferState"
        }
      }
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    }
  }
}
